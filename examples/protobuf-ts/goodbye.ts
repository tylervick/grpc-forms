/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies,eslint_disable
// @generated from protobuf file "goodbye.proto" (package "helloworld", syntax proto3)
// tslint:disable
import type {
  BinaryReadOptions,
  BinaryWriteOptions,
  IBinaryReader,
  IBinaryWriter,
  PartialMessage,
} from '@protobuf-ts/runtime';
import {
  MessageType,
  UnknownFieldHandler,
  WireType,
  reflectionMergePartial,
} from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message helloworld.GoodbyeRequest
 */
export interface GoodbyeRequest {
  /**
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * @generated from protobuf field: helloworld.MessageWithAllTypes message_with_all_types = 2;
   */
  messageWithAllTypes?: MessageWithAllTypes;
}
/**
 * @generated from protobuf message helloworld.GoodbyeResponse
 */
export interface GoodbyeResponse {
  /**
   * @generated from protobuf field: string message = 1;
   */
  message: string;
}
/**
 * @generated from protobuf message helloworld.MessageWithAllTypes
 */
export interface MessageWithAllTypes {
  /**
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * @generated from protobuf field: int32 age = 2;
   */
  age: number;
  /**
   * @generated from protobuf field: float height = 3;
   */
  height: number;
  /**
   * @generated from protobuf field: double weight = 4;
   */
  weight: number;
  /**
   * @generated from protobuf field: bool married = 5;
   */
  married: boolean;
  /**
   * @generated from protobuf field: repeated string friends = 6;
   */
  friends: string[];
  /**
   * @generated from protobuf field: helloworld.MessageWithAllTypes.NestedMessage nested = 7;
   */
  nested?: MessageWithAllTypes_NestedMessage;
  /**
   * @generated from protobuf field: map<string, string> properties = 8;
   */
  properties: {
    [key: string]: string;
  };
  /**
   * @generated from protobuf field: helloworld.GreetingType greeting = 9;
   */
  greeting: GreetingType;
  /**
   * @generated from protobuf oneof: test_oneof
   */
  testOneof:
    | {
        oneofKind: 'testOneofString';
        /**
         * @generated from protobuf field: string test_oneof_string = 10;
         */
        testOneofString: string;
      }
    | {
        oneofKind: 'testOneofInt32';
        /**
         * @generated from protobuf field: int32 test_oneof_int32 = 11;
         */
        testOneofInt32: number;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message helloworld.MessageWithAllTypes.NestedMessage
 */
export interface MessageWithAllTypes_NestedMessage {
  /**
   * @generated from protobuf field: string name = 1;
   */
  name: string;
}
/**
 * @generated from protobuf enum helloworld.GreetingType
 */
export enum GreetingType {
  /**
   * @generated from protobuf enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,
  /**
   * @generated from protobuf enum value: HELLO = 1;
   */
  HELLO = 1,
  /**
   * @generated from protobuf enum value: GOODBYE = 2;
   */
  GOODBYE = 2,
}
// @generated message type with reflection information, may provide speed optimized methods
class GoodbyeRequest$Type extends MessageType<GoodbyeRequest> {
  constructor() {
    super('helloworld.GoodbyeRequest', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'message_with_all_types', kind: 'message', T: () => MessageWithAllTypes },
    ]);
  }
  create(value?: PartialMessage<GoodbyeRequest>): GoodbyeRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = '';
    if (value !== undefined) reflectionMergePartial<GoodbyeRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GoodbyeRequest,
  ): GoodbyeRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* helloworld.MessageWithAllTypes message_with_all_types */ 2:
          message.messageWithAllTypes = MessageWithAllTypes.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.messageWithAllTypes,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GoodbyeRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '') writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* helloworld.MessageWithAllTypes message_with_all_types = 2; */
    if (message.messageWithAllTypes)
      MessageWithAllTypes.internalBinaryWrite(
        message.messageWithAllTypes,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message helloworld.GoodbyeRequest
 */
export const GoodbyeRequest = new GoodbyeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GoodbyeResponse$Type extends MessageType<GoodbyeResponse> {
  constructor() {
    super('helloworld.GoodbyeResponse', [
      { no: 1, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<GoodbyeResponse>): GoodbyeResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.message = '';
    if (value !== undefined) reflectionMergePartial<GoodbyeResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GoodbyeResponse,
  ): GoodbyeResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string message */ 1:
          message.message = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GoodbyeResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string message = 1; */
    if (message.message !== '') writer.tag(1, WireType.LengthDelimited).string(message.message);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message helloworld.GoodbyeResponse
 */
export const GoodbyeResponse = new GoodbyeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageWithAllTypes$Type extends MessageType<MessageWithAllTypes> {
  constructor() {
    super('helloworld.MessageWithAllTypes', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'age', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 3, name: 'height', kind: 'scalar', T: 2 /*ScalarType.FLOAT*/ },
      { no: 4, name: 'weight', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 5, name: 'married', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      {
        no: 6,
        name: 'friends',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 7, name: 'nested', kind: 'message', T: () => MessageWithAllTypes_NestedMessage },
      {
        no: 8,
        name: 'properties',
        kind: 'map',
        K: 9 /*ScalarType.STRING*/,
        V: { kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      },
      { no: 9, name: 'greeting', kind: 'enum', T: () => ['helloworld.GreetingType', GreetingType] },
      {
        no: 10,
        name: 'test_oneof_string',
        kind: 'scalar',
        oneof: 'testOneof',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 11,
        name: 'test_oneof_int32',
        kind: 'scalar',
        oneof: 'testOneof',
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<MessageWithAllTypes>): MessageWithAllTypes {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = '';
    message.age = 0;
    message.height = 0;
    message.weight = 0;
    message.married = false;
    message.friends = [];
    message.properties = {};
    message.greeting = 0;
    message.testOneof = { oneofKind: undefined };
    if (value !== undefined) reflectionMergePartial<MessageWithAllTypes>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MessageWithAllTypes,
  ): MessageWithAllTypes {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* int32 age */ 2:
          message.age = reader.int32();
          break;
        case /* float height */ 3:
          message.height = reader.float();
          break;
        case /* double weight */ 4:
          message.weight = reader.double();
          break;
        case /* bool married */ 5:
          message.married = reader.bool();
          break;
        case /* repeated string friends */ 6:
          message.friends.push(reader.string());
          break;
        case /* helloworld.MessageWithAllTypes.NestedMessage nested */ 7:
          message.nested = MessageWithAllTypes_NestedMessage.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.nested,
          );
          break;
        case /* map<string, string> properties */ 8:
          this.binaryReadMap8(message.properties, reader, options);
          break;
        case /* helloworld.GreetingType greeting */ 9:
          message.greeting = reader.int32();
          break;
        case /* string test_oneof_string */ 10:
          message.testOneof = {
            oneofKind: 'testOneofString',
            testOneofString: reader.string(),
          };
          break;
        case /* int32 test_oneof_int32 */ 11:
          message.testOneof = {
            oneofKind: 'testOneofInt32',
            testOneofInt32: reader.int32(),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  private binaryReadMap8(
    map: MessageWithAllTypes['properties'],
    reader: IBinaryReader,
    options: BinaryReadOptions,
  ): void {
    let len = reader.uint32(),
      end = reader.pos + len,
      key: keyof MessageWithAllTypes['properties'] | undefined,
      val: MessageWithAllTypes['properties'][any] | undefined;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = reader.string();
          break;
        case 2:
          val = reader.string();
          break;
        default:
          throw new globalThis.Error(
            'unknown map entry field for field helloworld.MessageWithAllTypes.properties',
          );
      }
    }
    map[key ?? ''] = val ?? '';
  }
  internalBinaryWrite(
    message: MessageWithAllTypes,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '') writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* int32 age = 2; */
    if (message.age !== 0) writer.tag(2, WireType.Varint).int32(message.age);
    /* float height = 3; */
    if (message.height !== 0) writer.tag(3, WireType.Bit32).float(message.height);
    /* double weight = 4; */
    if (message.weight !== 0) writer.tag(4, WireType.Bit64).double(message.weight);
    /* bool married = 5; */
    if (message.married !== false) writer.tag(5, WireType.Varint).bool(message.married);
    /* repeated string friends = 6; */
    for (let i = 0; i < message.friends.length; i++)
      writer.tag(6, WireType.LengthDelimited).string(message.friends[i]);
    /* helloworld.MessageWithAllTypes.NestedMessage nested = 7; */
    if (message.nested)
      MessageWithAllTypes_NestedMessage.internalBinaryWrite(
        message.nested,
        writer.tag(7, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* map<string, string> properties = 8; */
    for (let k of globalThis.Object.keys(message.properties))
      writer
        .tag(8, WireType.LengthDelimited)
        .fork()
        .tag(1, WireType.LengthDelimited)
        .string(k)
        .tag(2, WireType.LengthDelimited)
        .string(message.properties[k])
        .join();
    /* helloworld.GreetingType greeting = 9; */
    if (message.greeting !== 0) writer.tag(9, WireType.Varint).int32(message.greeting);
    /* string test_oneof_string = 10; */
    if (message.testOneof.oneofKind === 'testOneofString')
      writer.tag(10, WireType.LengthDelimited).string(message.testOneof.testOneofString);
    /* int32 test_oneof_int32 = 11; */
    if (message.testOneof.oneofKind === 'testOneofInt32')
      writer.tag(11, WireType.Varint).int32(message.testOneof.testOneofInt32);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message helloworld.MessageWithAllTypes
 */
export const MessageWithAllTypes = new MessageWithAllTypes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageWithAllTypes_NestedMessage$Type extends MessageType<MessageWithAllTypes_NestedMessage> {
  constructor() {
    super('helloworld.MessageWithAllTypes.NestedMessage', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(
    value?: PartialMessage<MessageWithAllTypes_NestedMessage>,
  ): MessageWithAllTypes_NestedMessage {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = '';
    if (value !== undefined)
      reflectionMergePartial<MessageWithAllTypes_NestedMessage>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MessageWithAllTypes_NestedMessage,
  ): MessageWithAllTypes_NestedMessage {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: MessageWithAllTypes_NestedMessage,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '') writer.tag(1, WireType.LengthDelimited).string(message.name);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message helloworld.MessageWithAllTypes.NestedMessage
 */
export const MessageWithAllTypes_NestedMessage = new MessageWithAllTypes_NestedMessage$Type();
