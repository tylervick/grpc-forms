/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies,eslint_disable
// @generated from protobuf file "helloworld.proto" (package "helloworld", syntax proto3)
// tslint:disable
import type { RpcOptions, RpcTransport, ServiceInfo, UnaryCall } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { GoodbyeRequest, GoodbyeResponse } from './goodbye';
import type { HelloRequest, HelloResponse } from './helloworld';
import { Greeter } from './helloworld';
/**
 * @generated from protobuf service helloworld.Greeter
 */
export interface IGreeterClient {
  /**
   * Sends a greeting
   *
   * @generated from protobuf rpc: SayHello(helloworld.HelloRequest) returns (helloworld.HelloResponse);
   */
  sayHello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloResponse>;
  /**
   * Sends a goodbye
   *
   * @generated from protobuf rpc: SayGoodbye(helloworld.GoodbyeRequest) returns (helloworld.GoodbyeResponse);
   */
  sayGoodbye(
    input: GoodbyeRequest,
    options?: RpcOptions,
  ): UnaryCall<GoodbyeRequest, GoodbyeResponse>;
}
/**
 * @generated from protobuf service helloworld.Greeter
 */
export class GreeterClient implements IGreeterClient, ServiceInfo {
  typeName = Greeter.typeName;
  methods = Greeter.methods;
  options = Greeter.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * Sends a greeting
   *
   * @generated from protobuf rpc: SayHello(helloworld.HelloRequest) returns (helloworld.HelloResponse);
   */
  sayHello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<HelloRequest, HelloResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Sends a goodbye
   *
   * @generated from protobuf rpc: SayGoodbye(helloworld.GoodbyeRequest) returns (helloworld.GoodbyeResponse);
   */
  sayGoodbye(
    input: GoodbyeRequest,
    options?: RpcOptions,
  ): UnaryCall<GoodbyeRequest, GoodbyeResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GoodbyeRequest, GoodbyeResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
}
