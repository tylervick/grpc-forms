/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies,eslint_disable
// @generated from protobuf file "helloworld.proto" (package "helloworld", syntax proto3)
// tslint:disable
import type {
  BinaryReadOptions,
  BinaryWriteOptions,
  IBinaryReader,
  IBinaryWriter,
  PartialMessage,
} from '@protobuf-ts/runtime';
import {
  MessageType,
  UnknownFieldHandler,
  WireType,
  reflectionMergePartial,
} from '@protobuf-ts/runtime';
import { ServiceType } from '@protobuf-ts/runtime-rpc';
import { GoodbyeRequest, GoodbyeResponse } from './goodbye';
/**
 * The request message containing the user's name.
 *
 * @generated from protobuf message helloworld.HelloRequest
 */
export interface HelloRequest {
  /**
   * The name of the person to greet
   *
   * @generated from protobuf field: string name = 1;
   */
  name: string;
}
/**
 * @generated from protobuf message helloworld.HelloResponse
 */
export interface HelloResponse {
  /**
   * @generated from protobuf field: string message = 1;
   */
  message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class HelloRequest$Type extends MessageType<HelloRequest> {
  constructor() {
    super('helloworld.HelloRequest', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<HelloRequest>): HelloRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = '';
    if (value !== undefined) reflectionMergePartial<HelloRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: HelloRequest,
  ): HelloRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: HelloRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '') writer.tag(1, WireType.LengthDelimited).string(message.name);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message helloworld.HelloRequest
 */
export const HelloRequest = new HelloRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloResponse$Type extends MessageType<HelloResponse> {
  constructor() {
    super('helloworld.HelloResponse', [
      { no: 1, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<HelloResponse>): HelloResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.message = '';
    if (value !== undefined) reflectionMergePartial<HelloResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: HelloResponse,
  ): HelloResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string message */ 1:
          message.message = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: HelloResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string message = 1; */
    if (message.message !== '') writer.tag(1, WireType.LengthDelimited).string(message.message);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message helloworld.HelloResponse
 */
export const HelloResponse = new HelloResponse$Type();
/**
 * @generated ServiceType for protobuf service helloworld.Greeter
 */
export const Greeter = new ServiceType('helloworld.Greeter', [
  { name: 'SayHello', options: {}, I: HelloRequest, O: HelloResponse },
  { name: 'SayGoodbye', options: {}, I: GoodbyeRequest, O: GoodbyeResponse },
]);
